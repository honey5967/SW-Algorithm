
#include <stdio.h>
#include <deque>
using namespace std;

int arr[102][102];			//배열 맵
int visit[102][102][4];		//방향에 따른 방문 여부


int N, M, answer = 987654321;

int dx[4] = { 0,1,0,-1 };
int dy[4] = { -1,0,1,0 };

struct str {
	int x, y, dir, count;
}start, des;

int boundary(int x, int y)	//경계 체크
{
	return (x >= 0 && y >= 0 && x < N && y < M);
}


int main()
{
	deque<str> deq;
	scanf("%d %d", &M, &N);

	for (int i = 1; i <= M; i++)
		for (int j = 1; j <= N; j++)
		{
			scanf("%d", &arr[i - 1][j - 1]);
		}
	scanf("%d %d %d", &start.y, &start.x, &start.dir);
	scanf("%d %d %d", &des.y, &des.x, &des.dir);



	//동서남북 편하게 세팅
	start.dir -= 1;
	des.dir -= 1;

	start.x -= 1;
	start.y -= 1;

	des.x -= 1;
	des.y -= 1;

	if (des.dir == 0)
		des.dir = 1;
	else if (des.dir == 1)
		des.dir = 3;
	else if (des.dir == 2)
		des.dir = 2;
	else if (des.dir == 3)
		des.dir = 0;

	if (start.dir == 0)
		start.dir = 1;
	else if (start.dir == 1)
		start.dir = 3;
	else if (start.dir == 2)
		start.dir = 2;
	else if (start.dir == 3)
		start.dir = 0;



	deq.push_back(start);
	visit[start.y][start.x][start.dir] = 1;


	//bfs 시작
	while (!deq.empty())
	{
		str s = deq.front();
		deq.pop_front();



		//종료 조건(목적지 도착)
		if (s.x == des.x && s.y == des.y)
		{
			if (s.dir == des.dir)	//방향 일치시
				answer = s.count;
			else if ((s.dir + 2) % 4 == des.dir)	//180도 회전해야할때
				answer = s.count + 2;
			else							//90도 회전해야할때
				answer = s.count + 1;			
			break;
		}



		//현재 방향 직진 3가지 가능한지
		for (int i = 1; i <= 3; i++)
		{
			int tx = s.x + dx[s.dir] * i;
			int ty = s.y + dy[s.dir] * i;

			// 경계값 내부이며 && 벽이 아니면서 && ( 방문한적이 없던가 || 현재 노드가 명령어가 더 적으면 )
			if (boundary(tx, ty) && arr[ty][tx] == 0 && (visit[ty][tx][s.dir] == 0 || visit[ty][tx][s.dir] >= s.count))
			{
				visit[ty][tx][s.dir] = s.count;
				deq.push_back({ tx,ty,s.dir,s.count + 1 });
			}
			else    //중간에 벽을 만나면 더이상 경로가 없으므로 break;
				break;
		}



		//회전해서 가능한 방향 있는지
		for (int i = 1; i <= 3; i++)
		{
			int tmp_dir = (s.dir + i) % 4;
			int tmp_x = s.x + dx[tmp_dir];
			int tmp_y = s.y + dy[tmp_dir];

			//경계내부이며 && 갈수있는 경로이면서 && 해당 방향으로 방문한적 없으면
			if (boundary(tmp_x, tmp_y) && arr[tmp_y][tmp_x] == 0 && visit[tmp_y][tmp_x][tmp_dir] == 0 )
			{
				if (i == 2)	//180도 회전이면
				{
					visit[s.y][s.x][tmp_dir] = s.count + 2;
					deq.push_back({ s.x,s.y,tmp_dir,s.count + 2 });
				}
				else   //90도 회전이면
				{
					visit[s.y][s.x][tmp_dir] = s.count + 1;
					deq.push_back({ s.x,s.y,tmp_dir,s.count + 1 });
				}
			}

		}



	}


	printf("%d\n", answer);

	return 0;
}

