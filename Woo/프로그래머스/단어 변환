
#include <string>
#include <vector>
#include <deque>
#include <map>

using namespace std;

//depth에 따른 방문 여부
map<string,int> visit[51];

struct str{
  string a;
    int depth;
    int count;
};

bool compare_possible(string a, string b)
{
	int res =0;

	for (int i = 0; i < a.size(); i++)
	{
		if (a[i] != b[i])
		{
			res++;
		}
	}


	return ((res <= 1) ? 1 : 0);
}

int solution(string begin, string target, vector<string> words) {

	int answer = 987654321;

	deque<str> que;
	que.push_back({begin,0,0});

	
	int k = 0;
	for (int i = 0; i < words.size(); i++)
	{
		if (words[i].compare(target)==0)
		{
			k = 1;
		}
	}
	if (k == 0)
	{
		return 0;
	}
    
	while (!que.empty())
	{
		string temp = que.front().a;
		int t_c = que.front().count;
        int t_d = que.front().depth;
        
		que.pop_front();
        
        if(temp.compare(target)==0)
        {
            answer = t_c;
            break;
        }
        
        
       for(int i=0;i<words.size();i++)
       {
           if(visit[t_d][words[i]] == 0 && compare_possible(temp,words[i]))
           {
               visit[t_d][words[i]] = 1;
               que.push_back({words[i],t_d+1,t_c+1});
            }
        }
        
	}

	return (answer == 987654321 ? 0 : answer);

}
