#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


int testcase;
int N, M, R, C, L;
int matrix[51][51];
int answer;
int visit[50][50];
int dir_arr[8][4] =
{
	{ 0,0,0,0 },
	{ 1,1,1,1 },
	{ 1,0,1,0 },
	{ 0,1,0,1 },
	{ 1,1,0,0 },
	{ 0,1,1,0 },
	{ 0,0,1,1 },
	{ 1,0,0,1 } 
};



int que[1001][3];
int front;
int end;
int time_arr[1001];

int boundary(int x, int y)
{
	return (x >= 0 && y >= 0 && x < M && y < N);
}

int sol(int x, int y, int non, int time)
{
	int mx = x;
	int my = y;

	if (time <= 0)
		return 0;

	if (!boundary(x, y))
		return 0;

	

	//위
	if (boundary(x,y-1) && dir_arr[matrix[y][x]][0] == 1 && dir_arr[matrix[y - 1][x]][2] == 1 && visit[y - 1][x] == 0)
	{
		visit[y][x] = 1;
		time_arr[end] = time - 1;
		que[end][0] = x;
		que[end++][1] = y - 1;


	}
	//오른쪽
	if (boundary(x+1,y) && dir_arr[matrix[y][x]][1] == 1 && dir_arr[matrix[y][x + 1]][3] == 1 && visit[y][x + 1] == 0)
	{
		visit[y][x] = 1;
		time_arr[end] = time - 1;
		que[end][0] = x + 1;
		que[end++][1] = y;
	}


	//아래
	if (boundary(x,y+1) && dir_arr[matrix[y][x]][2] == 1 && dir_arr[matrix[y + 1][x]][0] == 1 && visit[y + 1][x] == 0)
	{
		visit[y][x] = 1;
		time_arr[end] = time - 1;
		que[end][0] = x;
		que[end++][1] = y + 1;

	}

	//왼쪽
	if (boundary(x-1,y) &&dir_arr[matrix[y][x]][3] == 1 && dir_arr[matrix[y][x - 1]][1] == 1 && visit[y][x - 1] == 0)
	{
		visit[y][x] = 1;
		time_arr[end] = time - 1;
		que[end][0] = x - 1;
		que[(end++)][1] = y;

	}

	//아무것도 못찾앗을때 자신만 체크
	visit[y][x] = 1;

	if (front == end - 1) //큐 종료 조건
		return 0;
	else {
		
		sol(que[front++][0], que[front][1], 0, time_arr[front]);
		return 0;

	}
	return 0;
}


int main()
{
	scanf("%d", &testcase);

	for (int T = 0; T < testcase; T++)
	{
		scanf("%d %d %d %d %d", &N, &M, &R, &C, &L);


		//초기화
		answer = 0;
		front = -1;
		end = 0;

		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++)
			{
				matrix[i][j] = -1;
				visit[i][j] = 0;
			}

		for (int i = 0; i < 50; i++)
			for (int j = 0; j < 2; j++)
				que[i][j] = 0;


	

		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++) {
				scanf("%d", &matrix[i][j]);
			}

		sol(C, R, 0, L);


		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++)
			{
				if(visit[i][j] == 1)
				{
					answer++;
				}

			}
		}

		printf("#%d %d\n", T + 1, answer);
	}//testcase 하단

	return 0;

}
