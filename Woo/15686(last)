
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <vector>
#include <math.h>

using namespace std;

int N,M,answer = 987654321;

int arr[51][51];


vector<pair<int,int>> person;
vector<pair<int,int>> chicken;
vector<pair<int,int>> que_select;

int dfs(int cur, int select)		//cur번째 치킨집 , 치킨집 선택 갯수
{
	//종료 조건(치킨집 선택 끝나면)
	if (select >= M)
	{
		int t_answer = 0;
		for (int i = 0; i < person.size(); i++)
		{
			int min = 987654321;
			for (int j = 0; j < que_select.size(); j++)
			{
				//집과 치킨집의 거리 계산
				int a = abs(person.at(i).first - que_select.at(j).first) + abs(person.at(i).second - que_select.at(j).second);
				if (min > a)   //거리가 가장 짧을때
					min = a;
			}
			t_answer += min;	//사람집에서 가장 가까운 치킨집의 최소거리 저장
		}

		//총 거리의 합이 최소일때
		if (answer > t_answer)
			answer = t_answer;

		return 0;
	}
	else    //치킨집 선택
		for (int i = cur; i < chicken.size(); i++)
		{
			que_select.push_back(make_pair(chicken.at(i).first, chicken.at(i).second));
			dfs(i+1,select + 1);
			que_select.pop_back();
		}



	return 0;
}

int main()
{
	scanf("%d %d", &N,&M);
	
	for(int i=0;i<N;i++)
		for (int j = 0; j < N; j++)
		{
			scanf("%d", &arr[i][j]);
			if (arr[i][j] == 1)				//사람집일때
				person.push_back(make_pair(j,i));
			else if (arr[i][j] == 2)		//치킨집일때
				chicken.push_back(make_pair(j, i));
		}

	//치킨집 선택 dfs
	dfs(0,0);

	printf("%d\n", answer);

	return 0;
}

